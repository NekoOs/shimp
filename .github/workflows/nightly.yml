name: Build Nightly Binaries

on:
  workflow_dispatch:
  push:
    branches:
      - master

permissions:
  contents: write

env:
  NIGHTLY_VERSION: 0.1.0-alpha.${{ github.run_number }}
  NIGHTLY_TAG: nightly

jobs:
  build:
    name: Build binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node version from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup-3.0-dev \
            pkg-config \
            xdg-utils

      - name: Clean previous builds (Linux/macOS)
        if: runner.os != 'Windows'
        run: rm -rf src-tauri/target/release/bundle || true

      - name: Clean previous builds (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path "src-tauri/target/release/bundle") {
            Remove-Item -Recurse -Force "src-tauri/target/release/bundle"
          }

      - name: Install Tauri CLI
        run: pnpm add -g @tauri-apps/cli

      - name: Build Tauri app
        run: pnpm dlx @tauri-apps/cli@latest build
        env:
          TAURI_APP_VERSION: ${{ env.NIGHTLY_VERSION }}
          TAURI_SKIP_OPEN: "true"

      - name: Upload build binaries only
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/**/*.AppImage
            src-tauri/target/release/bundle/**/*.deb
            src-tauri/target/release/bundle/**/*.rpm
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.exe
            src-tauri/target/release/bundle/**/*.dmg
            src-tauri/target/release/bundle/**/*.zip

  release:
    name: Release Nightly
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete existing GitHub release and tag (if exists)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete nightly --yes || true
          git tag -d nightly || true
          git push origin :refs/tags/nightly || true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: find artifacts -type f

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NIGHTLY_TAG }}
          name: Shimp Nightly â€“ ${{ env.NIGHTLY_VERSION }}
          prerelease: true
          fail_on_unmatched_files: false
          files: |
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.msi
            artifacts/**/*.exe
            artifacts/**/*.dmg
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old draft releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release list --limit 100 --json tagName,isDraft |
          jq -r '.[] | select(.isDraft and .tagName == "nightly") | .tagName' |
          while read -r tag; do
            echo "Deleting draft release with tag: $tag"
            gh release delete "$tag" --yes || true
          done
